// <auto-generated />
using System;
using Exam.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Exam.Migrations
{
    [DbContext(typeof(edulmsContext))]
    partial class edulmsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Arabic_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Exam.Models.Assessment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("category_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("Duration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("duration")
                        .HasDefaultValueSql("('7')");

                    b.Property<byte>("Published")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("published")
                        .HasDefaultValueSql("('1')");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("text")
                        .HasColumnName("short_description");

                    b.Property<string>("Slug")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("slug");

                    b.Property<string>("Thumbnail")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("thumbnail");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.ToTable("assessments");
                });

            modelBuilder.Entity("Exam.Models.AssessmentAnswer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("answer");

                    b.Property<long>("AssessmentId")
                        .HasColumnType("bigint")
                        .HasColumnName("assessment_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<long>("QuestionId")
                        .HasColumnType("bigint")
                        .HasColumnName("question_id");

                    b.Property<byte>("Score")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("score")
                        .HasDefaultValueSql("('0')");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("assessment_answers");
                });

            modelBuilder.Entity("Exam.Models.AssessmentDatum", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AssessmentId")
                        .HasColumnType("bigint")
                        .HasColumnName("assessment_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Data")
                        .HasColumnType("text")
                        .HasColumnName("data");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId");

                    b.ToTable("assessment_data");
                });

            modelBuilder.Entity("Exam.Models.AssessmentDepartment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AssessmentId")
                        .HasColumnType("bigint")
                        .HasColumnName("assessment_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint")
                        .HasColumnName("group_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId");

                    b.ToTable("assessment_department");
                });

            modelBuilder.Entity("Exam.Models.AssessmentEnrol", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AssessmentId")
                        .HasColumnType("bigint")
                        .HasColumnName("assessment_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int?>("Result")
                        .HasColumnType("int")
                        .HasColumnName("result");

                    b.Property<byte>("Score")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("score")
                        .HasDefaultValueSql("('0')");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId");

                    b.HasIndex("UserId");

                    b.ToTable("assessment_enrols");
                });

            modelBuilder.Entity("Exam.Models.AssessmentMatch", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer")
                        .HasColumnType("text")
                        .HasColumnName("answer");

                    b.Property<string>("AnswerIdKey")
                        .IsRequired()
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("char(36)")
                        .HasColumnName("answer_id_key")
                        .IsFixedLength(true);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Option")
                        .HasColumnType("text")
                        .HasColumnName("option");

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("order")
                        .HasDefaultValueSql("('0')");

                    b.Property<long>("QuestionId")
                        .HasColumnType("bigint")
                        .HasColumnName("question_id");

                    b.Property<string>("QuestionIdKey")
                        .IsRequired()
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("char(36)")
                        .HasColumnName("question_id_key")
                        .IsFixedLength(true);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex(new[] { "AnswerIdKey" }, "IX_assessment_match")
                        .IsUnique();

                    b.HasIndex(new[] { "QuestionIdKey" }, "IX_assessment_match_1")
                        .IsUnique();

                    b.ToTable("assessment_match");
                });

            modelBuilder.Entity("Exam.Models.AssessmentMetum", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AssessmentId")
                        .HasColumnType("bigint")
                        .HasColumnName("assessment_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId");

                    b.ToTable("assessment_meta");
                });

            modelBuilder.Entity("Exam.Models.AssessmentOption", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Correct")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("correct")
                        .HasDefaultValueSql("('0')");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Option")
                        .HasColumnType("text")
                        .HasColumnName("option");

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("order")
                        .HasDefaultValueSql("('0')");

                    b.Property<long>("QuestionId")
                        .HasColumnType("bigint")
                        .HasColumnName("question_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("assessment_options");
                });

            modelBuilder.Entity("Exam.Models.AssessmentQuestion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("category_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int>("Level")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("level")
                        .HasDefaultValueSql("('0')");

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("order")
                        .HasDefaultValueSql("('0')");

                    b.Property<string>("Question")
                        .HasColumnType("text")
                        .HasColumnName("question");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("assessment_questions");
                });

            modelBuilder.Entity("Exam.Models.AssessmentQuestionsRelation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AssessmentId")
                        .HasColumnType("bigint")
                        .HasColumnName("assessment_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<long>("QuestionId")
                        .HasColumnType("bigint")
                        .HasColumnName("question_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId");

                    b.HasIndex("QuestionId");

                    b.ToTable("assessment_questions_relation");
                });

            modelBuilder.Entity("Exam.Models.AssessmentSection", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AssessmentId")
                        .HasColumnType("bigint")
                        .HasColumnName("assessment_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("order")
                        .HasDefaultValueSql("('0')");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId");

                    b.ToTable("assessment_sections");
                });

            modelBuilder.Entity("Exam.Models.AssessmentText", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer")
                        .HasColumnType("text")
                        .HasColumnName("answer");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("order")
                        .HasDefaultValueSql("('0')");

                    b.Property<long>("QuestionId")
                        .HasColumnType("bigint")
                        .HasColumnName("question_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("assessment_text");
                });

            modelBuilder.Entity("Exam.Models.AssessmentTrueFalse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int>("IsTrue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("is_true")
                        .HasDefaultValueSql("('0')");

                    b.Property<long>("QuestionId")
                        .HasColumnType("bigint")
                        .HasColumnName("question_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("assessment_true_false");
                });

            modelBuilder.Entity("Exam.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApiKey")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("char(36)")
                        .HasColumnName("api_key")
                        .IsFixedLength(true);

                    b.Property<string>("ConfirmCode")
                        .IsRequired()
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("char(36)")
                        .HasColumnName("confirm_code")
                        .IsFixedLength(true);

                    b.Property<DateTime?>("ConfirmedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("confirmed_at");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("display_name");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("first_name");

                    b.Property<byte>("IsBanned")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("is_banned")
                        .HasDefaultValueSql("('0')");

                    b.Property<byte>("IsLdap")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("is_ldap")
                        .HasDefaultValueSql("('0')");

                    b.Property<byte>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("is_verified")
                        .HasDefaultValueSql("('0')");

                    b.Property<string>("LastName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("last_name");

                    b.Property<string>("Otp")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("otp");

                    b.Property<DateTime?>("OtpCreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("otp_created_at");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.Property<DateTime?>("PasswordChangedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("password_changed_at");

                    b.Property<long?>("ProfilePictureId")
                        .HasColumnType("bigint")
                        .HasColumnName("profile_picture_id");

                    b.Property<string>("RememberToken")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("remember_token");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.Property<string>("UserUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_url");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Exam.Models.AssessmentAnswer", b =>
                {
                    b.HasOne("Exam.Models.Assessment", "Assessment")
                        .WithMany("AssessmentAnswers")
                        .HasForeignKey("AssessmentId")
                        .HasConstraintName("FK_assessment_answers_assessments")
                        .IsRequired();

                    b.HasOne("Exam.Models.AssessmentQuestion", "Question")
                        .WithMany("AssessmentAnswers")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("FK_assessment_answers_assessment_questions")
                        .IsRequired();

                    b.HasOne("Exam.Models.User", "User")
                        .WithMany("AssessmentAnswers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_assessment_answers_users")
                        .IsRequired();

                    b.Navigation("Assessment");

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Exam.Models.AssessmentDatum", b =>
                {
                    b.HasOne("Exam.Models.Assessment", "Assessment")
                        .WithMany("AssessmentData")
                        .HasForeignKey("AssessmentId")
                        .HasConstraintName("FK_assessment_data_assessments")
                        .IsRequired();

                    b.Navigation("Assessment");
                });

            modelBuilder.Entity("Exam.Models.AssessmentDepartment", b =>
                {
                    b.HasOne("Exam.Models.Assessment", "Assessment")
                        .WithMany("AssessmentDepartments")
                        .HasForeignKey("AssessmentId")
                        .HasConstraintName("FK_assessment_department_assessments")
                        .IsRequired();

                    b.Navigation("Assessment");
                });

            modelBuilder.Entity("Exam.Models.AssessmentEnrol", b =>
                {
                    b.HasOne("Exam.Models.Assessment", "Assessment")
                        .WithMany("AssessmentEnrols")
                        .HasForeignKey("AssessmentId")
                        .HasConstraintName("FK_assessment_enrols_assessments")
                        .IsRequired();

                    b.HasOne("Exam.Models.User", "User")
                        .WithMany("AssessmentEnrols")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_assessment_enrols_users")
                        .IsRequired();

                    b.Navigation("Assessment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Exam.Models.AssessmentMatch", b =>
                {
                    b.HasOne("Exam.Models.AssessmentQuestion", "Question")
                        .WithMany("AssessmentMatches")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("FK_assessment_match_assessment_questions")
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Exam.Models.AssessmentMetum", b =>
                {
                    b.HasOne("Exam.Models.Assessment", "Assessment")
                        .WithMany("AssessmentMeta")
                        .HasForeignKey("AssessmentId")
                        .HasConstraintName("FK_assessment_meta_assessments")
                        .IsRequired();

                    b.Navigation("Assessment");
                });

            modelBuilder.Entity("Exam.Models.AssessmentOption", b =>
                {
                    b.HasOne("Exam.Models.AssessmentQuestion", "Question")
                        .WithMany("AssessmentOptions")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("FK_assessment_options_assessment_questions")
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Exam.Models.AssessmentQuestionsRelation", b =>
                {
                    b.HasOne("Exam.Models.Assessment", "Assessment")
                        .WithMany("AssessmentQuestionsRelations")
                        .HasForeignKey("AssessmentId")
                        .HasConstraintName("FK_assessment_questions_relation_assessments")
                        .IsRequired();

                    b.HasOne("Exam.Models.AssessmentQuestion", "Question")
                        .WithMany("AssessmentQuestionsRelations")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("FK_assessment_questions_relation_assessment_questions")
                        .IsRequired();

                    b.Navigation("Assessment");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Exam.Models.AssessmentSection", b =>
                {
                    b.HasOne("Exam.Models.Assessment", "Assessment")
                        .WithMany("AssessmentSections")
                        .HasForeignKey("AssessmentId")
                        .HasConstraintName("FK_assessment_sections_assessments")
                        .IsRequired();

                    b.Navigation("Assessment");
                });

            modelBuilder.Entity("Exam.Models.AssessmentText", b =>
                {
                    b.HasOne("Exam.Models.AssessmentQuestion", "Question")
                        .WithMany("AssessmentTexts")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("FK_assessment_text_assessment_questions")
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Exam.Models.AssessmentTrueFalse", b =>
                {
                    b.HasOne("Exam.Models.AssessmentQuestion", "Question")
                        .WithMany("AssessmentTrueFalses")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("FK_assessment_true_false_assessment_questions")
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Exam.Models.Assessment", b =>
                {
                    b.Navigation("AssessmentAnswers");

                    b.Navigation("AssessmentData");

                    b.Navigation("AssessmentDepartments");

                    b.Navigation("AssessmentEnrols");

                    b.Navigation("AssessmentMeta");

                    b.Navigation("AssessmentQuestionsRelations");

                    b.Navigation("AssessmentSections");
                });

            modelBuilder.Entity("Exam.Models.AssessmentQuestion", b =>
                {
                    b.Navigation("AssessmentAnswers");

                    b.Navigation("AssessmentMatches");

                    b.Navigation("AssessmentOptions");

                    b.Navigation("AssessmentQuestionsRelations");

                    b.Navigation("AssessmentTexts");

                    b.Navigation("AssessmentTrueFalses");
                });

            modelBuilder.Entity("Exam.Models.User", b =>
                {
                    b.Navigation("AssessmentAnswers");

                    b.Navigation("AssessmentEnrols");
                });
#pragma warning restore 612, 618
        }
    }
}
